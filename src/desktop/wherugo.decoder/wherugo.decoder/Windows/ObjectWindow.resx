<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAICAAAAEAGACoDAAAJgAAABAQAAABABgAaAMAAM4MAAAoAAAAIAAAAEAAAAABABgAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA4eHh6urq29vb1NTU6eroy8zK4+Pj5ubmycnJ6urqxMTE6urq4+Pjr6+v
        2NjYzc3N4uLi6urq6OjouLi42NjY6urq7evr6ObmsrKy09PT6urq6urqwsLC3d3d6urq4eHh6urq9fX1
        jIyMbW1t9fb0SElHsrKy4eHhaWlp9fX1U1NT7+/vUFBQtra2xcXFeHh40dHR9fX1XV1dqKioaWlpt7e3
        6ujoVlRUsrKyXFxczMzMhISEl5eXV1dX3d3d6urq6urq9vb2WFhYWlpa6+vrTU1Nd3d34eHhaWlp9fX1
        VVJUvbq8REREenp6l5eXeHh40dHR5+fnYmJi9vb26OjoYWFhmpmbrayuzc3NY2NjuLi4WFhY9fX1rKys
        mZmZ6urq6urq9fX1Tk5Oenp6h4eHoaGhU1NT4eHhSEhI0dHRVFFT6+rsYGBgxsbGdXV1c3NzjIyM0NDQ
        ZWVl+vr68vLyWFhYhIOFvLu92dnZv7+/6OjocXFxvb29Y2Nj0dHR6urq6urq0dHRb29vvb29FRUV4uLi
        U1NT29vbW1tblJSU0tLS19fXoqGjmJqbvr6+rKysfX9/i42NSEpKtLa2y83NUlRUycnJfHx89/X1hoSE
        5+fn8PDwpaWlysrK9fT26+rs6urqubm5uLi48fHxampq9fX1np6ew8PDaWlp0tLSsLCwsK6us66t5t7e
        zMC+9urmua6qsKWhcmlms66trqyrYmJixcXFmZmZc3Fxo6Gh9fX19fX19fX19fX19fT26unr6unr9fT2
        9/X19/X1+Pb29/X19/f37e3tsLKyrq6usK6tta6rvq6o583G7MjA8svCvJWMx6Sayq2mwa2oua2rsa2s
        rq6ura+v4eHh9vb29fX19fX19fX19fX19fX16urq6unr9fT29/X19/X19/X1+ff34+PjsLCwsq6tta6r
        wK2ouZ2Wontynm5immBUm15Qm19PmF9QmGRYn3Vpq4qBwqymuq6qu7a18e/v2tra9/f39fX19fX19fX1
        9fX16urq6urq9fX19/X19/X19vb26urqsLCwsq6tua2rxqymtIR4nmBQo15NqF5Mq15Lq15Lql1Kq15L
        q19Npl5MomBOpW5hxaGZ/erlycTD6+3t3t7e9vb29fX19fX19fX16urq6urq9fX19/X19fX1/f39ycnJ
        sK6tua2rvKCZm25ho15Nr15Js15ItF5ItF5ItF5ItF5ItF5ItF5ItF5Is11Jql5Mm2JTv5uR9eXfzcnI
        sK6u5eXl9fX19fX19vb26enp6urq9fX19fX1+fn51tbW4+Hg8ern1r64nWhbpl5MrV5Js15ItF5ItV9J
        tF5ItF5ItV9JtF5ItF5ItF5ItF5IsV5Jq15Lm19Pz6ujvq2qsq6ttbe39/f39PT09fX16enp6urq9PT0
        9vb28PDw6uzs3NfW0L24vJOKpF5Ns11JtF5ItF5ItF5ItF9Jr15Jq15LrF9MrF1Is11JtV9JtF5ItF5I
        tF5Iq19MmWRXxaadua2rrq6u2NjY9vb29fX16urq6evr8/X1+Pj4zMzMrK6u1MnF7ca9m15Qq15LtF5I
        tV9JtF5ItV9Jr15Jo15Nxop6/8e4n19NrV5Ltl1ItF5ItF5Itl1IsV5Jpl5Mp3ZowK2osK6ttra29/n5
        9fX16urq6Orq8/X1+vr6tLS0rq6uv6yno25hql5MsV5JtF5ItF5Is15IrV5JpF9Ov42B//nw//3zqnpu
        ql5MtF5ItF5ItF5Itl1ItF5IsV5JnV9PtZmStK+srq6u6evr9fX16urq6+vr9fX17ezurq6usK6twayk
        nmBQsV5ItF5ItF5ItF5IrV5JoV9NwZGF//r0//77//775sW8ol1MtF1JtF5ItF5ItF5ItF5Is15IpF9O
        qoZ+uq6qsq6t1NbW9fX16urq6urq9vb24uHjsK6utK+st5ySo19Mtl5Gs11Hs15IsF9KpF5NxpSI//v0
        ///8///////+//v2rXJjrV5Ls11JtF5ItF5ItF5ItF5Ipl5Monhswa2os66tycvL9vb26urq6+jq+fb4
        2trasq6tuq6qsIyEpF9MtF5ItF5Ir15Jpl5MzJeK//z2///8///+//////////776buwoV5PrV5LtF5I
        tF5ItF5ItF5IqF5MmWdbyaynta6rwMLC9/f36urq7Onr+vf51NTUs66tvK2qon11pF5NtF5ItF5Ir15J
        r2dV/9/S//73//78//7+///+//////78//fxoGteql5MtF5ItF5ItF5ItF5Iq19Nk19T+dzV7OPg5ujo
        +Pj46urq6urq9/f33Nzcsq6tuq2rqomApF5NtF5ItF1Js11Jr15Jp19Ny5aJ/+ff//75///8///+///+
        //772LGopF5Ns15ItF5ItF5ItV9JqF5MmWdb2765ycC9z8/P9vb26urq6urq9fX14+PjsK6tta6rt5qT
        oV9NtF5ItF1JtF1JtF5Ir15Jpl5Mm2JTyJ+W/+7n//75///7//78//PuomZWrV5Js15ItF5ItF5IpV1L
        sYR5+OLc6uPg6urq9vb26urq6urq9vb27+/vsLCwz83M+uTenV9Ps11JtF5ItF5ItF5Is15Ir15Jq15L
        pl5Mo2VV2amd//Pq//77//3526ebpF9Mr15JtF5ItF5IpF9MqoZ8vK6osq6t1tjY9fT26unr6urq9fX1
        +/v76+vr0dPT0MC6qXJlq15Lsl9Ks11HtF5ItF5ItF5ItF5ItF5Ir11Lo15Nn2hb2rOr//fv/+3hpmRS
        rV5Js15IsV5JnV9PspWOt66rsK6t6+3t9fT26unr6urq9fX1+Pj43d3d5ubm8ubixp2UnV9PrV5LtF5I
        tF5ItF5ItV9JtV9JtF1Js11JsF5Mql5MpF5Nrm1e/byt3pmIr15JsV5JqF5MpHBjwK2osK6tubm5+Pj4
        9fX16urq6urq9fX19fX1+/v7vr6+ta6rxa2npnhtpF5NsV5Js15ItF5ItF5ItF5ItF1JtF1JtF1JtF1J
        s11Jrl1IqF5MrmRSr15Jql5LnGFSxaGXua6qq62t3t7e9fX19fX16urq6urq9fX19fX1+Pj4z9HRsK6u
        ta2twaehnWRVql5LsV5JtF5Is1xItF1JtF5ItV9JtF5ItF5ItF5Is15IsV5Jr15JrV5Jn19NroqAvq6o
        sq6tubu79/f39fX19fX16urq6urq9PT09fX19fX19Pb2t7m5rq2vuq2rvpqQnWZXpF5Nq15LsV5Js11J
        tF5ItF5ItF5ItV9JtF5Is11Jr15JqF9Ln19NrYBzwa2osq6tr6+v5+np9fX19fX19fX16urq6urq9fX1
        9fX19fX19vb27+/vr7Gysq2uuq6qwqihp3pvm19Pql5LsV5JtF5Itl1ItF5ItF5Is11JrV5Lo15NoGte
        2biv4NDKs66rr6+v3d3d9vb29PT09fX19fX16urq6urq9fX19fX19fX19fX19/f36OfpsbOzrq6uta6r
        xa2n0aqhrnlsomRUoV9No15No15NoF5Mn15Po2pbrYBz/d7V0sbC6+nowcHB09XV9/f39fX19PT09fX1
        9fX16urq7Orq9/X19fX19fX19/X19fX19vb28fHxurq6sK6tta6r7eLezr64+uTevKCZsJCKqImAtpmS
        waikwK2qvK2qvLOw8u7tw8PD9/f39vb28/X18/X19fX19fX19fX16enp7Orq9/X19fX19PT09/X19/X1
        9fX19/f3+Pj429vbsrWz6+7swsTE2NbWs66tt66rua2rta6rsq2urq2vrK6urK6u19nZ9vj49vb29fX1
        8/X18/X19fX19fX19fX16urq6urq9fX19fX19fX19fX19fX19fX19fX19fX19/f3+Pj48vLy4+PjxMTE
        sK6usq6tsq6tsK6tsa+vwMDA2dnZ8vLy9/f39fX19fX19fX19fX19fX19PT09fX19fX16urq4eHh6urq
        6urq6urq6urq6urq6urq6urq6urq6urq6urq6+vr8fHx9vb28vLy7Ozs6urq8PDw9PT08fHx6+vr6urq
        6urq6+vr6+vr6enp6urq6urq6urq6+vr6urq4eHhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAEAAAACAAAAABABgAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA5+fnlpaWsLCwzMzMvr6+ra2toKCgsrKy4+PjoKCgr6+vvb29n5+fvLy8
        np6e3Nzc7OzsZWVlk5OTn5+fj4+PnJqaZmJhj4qJw769sKyrqqioqqqqt7e3qKionZ2d09PT19fXxsbG
        p6WlsK6ura2tz8vK1MjG28zJsKKcmo+LnpmYu7m5pqam8vLy7u7u7u7u7u7u9fX1+Pb25+LhvrKuwKqk
        uJiSupaMpYF3r46FvaWfwbKv7uno+Pb29fX17u7u7u/t9fb07Orpva6rwJmQoGlaoV5PpF9MpF9MoV9N
        nWJTzaOX6dbR5eHg9/X17u7u7e7s9vTz6uHe27+4m2JTqF5Mql5Lq15LrV5LrV5Lq15LnV9PuZiPwLSw
        9vLx7u7u7O7u5+LfyrSuo3lto15Nql5LnF5O2Z6P46WVpF5NrV5Lp19NlmVXxaif4NfU7u7u7O7u3dTR
        x6iflWBTqF9LqF5M16OW//7y/+zhnGNUq15LrV5Lm19Pv5eL0sbC7u7u7e/v0MXBvZqQmGBPqF9L1pGA
        //30//74//34yJ2Upl5Mr15JoV9NwZWI39DN7+/v7O7u18zIxKGXl2BRpl9LpF9Mvo2D/+Hb//73/+bd
        pmBPrF9Mn19Ny6GV5tfU7u7u7O7u6+Th68/IkmJWpl5Mr15JqF5MoF9QzZiL/+jb2pSDpF5Nll9SwJyU
        3NDO7u7u7O7u9vHw3s3KrYiAn15PrV5Js11Jr11Lpl5NpGJQy4Z1m15Qn3Rrxa2n7OXi7u7u7u7u+ff3
        2tXUwKynn3Jln19NrV5LsV5Jr15Jq19NoV5PmWdbvKSe08rH+vb17u7u7+/v9fX19vb2y8K/yKyltox/
        n2ZXoGBOn19NnGFStoZ67szGzMG99PLx9fX17u7u7u7u9fX19fX1+vb14NfU2svI5NDLuaOdtZ+ZwK2m
        v66r7eHf9/Py9PT09fX17u7u5+fn7u7u7u7u7u7u7u7u8PDw6Obm1tTU0tPR3+De7evr8O7u7u7u7u7u
        7+/v5+fnAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAArEEAAKxBAACsQQAA
        rEEAAKxBAACsQQ==
</value>
  </data>
</root>